{"version":3,"file":"static/js/303.0c44a84d.chunk.js","mappings":"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","sources":["../node_modules/@mui/material/ListItemButton/ListItemButton.js","../node_modules/@mui/material/ListItemText/listItemTextClasses.js","../node_modules/@mui/material/ListItemText/ListItemText.js","../node_modules/@mui/material/Typography/typographyClasses.js","../node_modules/@mui/material/Typography/Typography.js","../node_modules/memoize-one/dist/memoize-one.esm.js","../node_modules/react-window/src/timer.js","../node_modules/react-window/src/domHelpers.js","../node_modules/react-window/src/createGridComponent.js","../node_modules/react-window/src/createListComponent.js","../node_modules/react-window/src/FixedSizeList.js"],"sourcesContent":["'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"alignItems\", \"autoFocus\", \"component\", \"children\", \"dense\", \"disableGutters\", \"divider\", \"focusVisibleClassName\", \"selected\", \"className\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base/composeClasses';\nimport { alpha } from '@mui/system';\nimport styled, { rootShouldForwardProp } from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport ButtonBase from '../ButtonBase';\nimport useEnhancedEffect from '../utils/useEnhancedEffect';\nimport useForkRef from '../utils/useForkRef';\nimport ListContext from '../List/ListContext';\nimport listItemButtonClasses, { getListItemButtonUtilityClass } from './listItemButtonClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const overridesResolver = (props, styles) => {\n  const {\n    ownerState\n  } = props;\n  return [styles.root, ownerState.dense && styles.dense, ownerState.alignItems === 'flex-start' && styles.alignItemsFlexStart, ownerState.divider && styles.divider, !ownerState.disableGutters && styles.gutters];\n};\nconst useUtilityClasses = ownerState => {\n  const {\n    alignItems,\n    classes,\n    dense,\n    disabled,\n    disableGutters,\n    divider,\n    selected\n  } = ownerState;\n  const slots = {\n    root: ['root', dense && 'dense', !disableGutters && 'gutters', divider && 'divider', disabled && 'disabled', alignItems === 'flex-start' && 'alignItemsFlexStart', selected && 'selected']\n  };\n  const composedClasses = composeClasses(slots, getListItemButtonUtilityClass, classes);\n  return _extends({}, classes, composedClasses);\n};\nconst ListItemButtonRoot = styled(ButtonBase, {\n  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',\n  name: 'MuiListItemButton',\n  slot: 'Root',\n  overridesResolver\n})(({\n  theme,\n  ownerState\n}) => _extends({\n  display: 'flex',\n  flexGrow: 1,\n  justifyContent: 'flex-start',\n  alignItems: 'center',\n  position: 'relative',\n  textDecoration: 'none',\n  minWidth: 0,\n  boxSizing: 'border-box',\n  textAlign: 'left',\n  paddingTop: 8,\n  paddingBottom: 8,\n  transition: theme.transitions.create('background-color', {\n    duration: theme.transitions.duration.shortest\n  }),\n  '&:hover': {\n    textDecoration: 'none',\n    backgroundColor: (theme.vars || theme).palette.action.hover,\n    // Reset on touch devices, it doesn't add specificity\n    '@media (hover: none)': {\n      backgroundColor: 'transparent'\n    }\n  },\n  [`&.${listItemButtonClasses.selected}`]: {\n    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),\n    [`&.${listItemButtonClasses.focusVisible}`]: {\n      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)\n    }\n  },\n  [`&.${listItemButtonClasses.selected}:hover`]: {\n    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),\n    // Reset on touch devices, it doesn't add specificity\n    '@media (hover: none)': {\n      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity)\n    }\n  },\n  [`&.${listItemButtonClasses.focusVisible}`]: {\n    backgroundColor: (theme.vars || theme).palette.action.focus\n  },\n  [`&.${listItemButtonClasses.disabled}`]: {\n    opacity: (theme.vars || theme).palette.action.disabledOpacity\n  }\n}, ownerState.divider && {\n  borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`,\n  backgroundClip: 'padding-box'\n}, ownerState.alignItems === 'flex-start' && {\n  alignItems: 'flex-start'\n}, !ownerState.disableGutters && {\n  paddingLeft: 16,\n  paddingRight: 16\n}, ownerState.dense && {\n  paddingTop: 4,\n  paddingBottom: 4\n}));\nconst ListItemButton = /*#__PURE__*/React.forwardRef(function ListItemButton(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiListItemButton'\n  });\n  const {\n      alignItems = 'center',\n      autoFocus = false,\n      component = 'div',\n      children,\n      dense = false,\n      disableGutters = false,\n      divider = false,\n      focusVisibleClassName,\n      selected = false,\n      className\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const context = React.useContext(ListContext);\n  const childContext = React.useMemo(() => ({\n    dense: dense || context.dense || false,\n    alignItems,\n    disableGutters\n  }), [alignItems, context.dense, dense, disableGutters]);\n  const listItemRef = React.useRef(null);\n  useEnhancedEffect(() => {\n    if (autoFocus) {\n      if (listItemRef.current) {\n        listItemRef.current.focus();\n      } else if (process.env.NODE_ENV !== 'production') {\n        console.error('MUI: Unable to set focus to a ListItemButton whose component has not been rendered.');\n      }\n    }\n  }, [autoFocus]);\n  const ownerState = _extends({}, props, {\n    alignItems,\n    dense: childContext.dense,\n    disableGutters,\n    divider,\n    selected\n  });\n  const classes = useUtilityClasses(ownerState);\n  const handleRef = useForkRef(listItemRef, ref);\n  return /*#__PURE__*/_jsx(ListContext.Provider, {\n    value: childContext,\n    children: /*#__PURE__*/_jsx(ListItemButtonRoot, _extends({\n      ref: handleRef,\n      href: other.href || other.to\n      // `ButtonBase` processes `href` or `to` if `component` is set to 'button'\n      ,\n      component: (other.href || other.to) && component === 'div' ? 'button' : component,\n      focusVisibleClassName: clsx(classes.focusVisible, focusVisibleClassName),\n      ownerState: ownerState,\n      className: clsx(classes.root, className)\n    }, other, {\n      classes: classes,\n      children: children\n    }))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? ListItemButton.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * Defines the `align-items` style property.\n   * @default 'center'\n   */\n  alignItems: PropTypes.oneOf(['center', 'flex-start']),\n  /**\n   * If `true`, the list item is focused during the first mount.\n   * Focus will also be triggered if the value changes from false to true.\n   * @default false\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * The content of the component if a `ListItemSecondaryAction` is used it must\n   * be the last child.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, compact vertical padding designed for keyboard and mouse input is used.\n   * The prop defaults to the value inherited from the parent List component.\n   * @default false\n   */\n  dense: PropTypes.bool,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the left and right padding is removed.\n   * @default false\n   */\n  disableGutters: PropTypes.bool,\n  /**\n   * If `true`, a 1px light border is added to the bottom of the list item.\n   * @default false\n   */\n  divider: PropTypes.bool,\n  /**\n   * This prop can help identify which element has keyboard focus.\n   * The class name will be applied when the element gains the focus through keyboard interaction.\n   * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).\n   * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).\n   * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components\n   * if needed.\n   */\n  focusVisibleClassName: PropTypes.string,\n  /**\n   * @ignore\n   */\n  href: PropTypes.string,\n  /**\n   * Use to apply selected styling.\n   * @default false\n   */\n  selected: PropTypes.bool,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default ListItemButton;","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getListItemTextUtilityClass(slot) {\n  return generateUtilityClass('MuiListItemText', slot);\n}\nconst listItemTextClasses = generateUtilityClasses('MuiListItemText', ['root', 'multiline', 'dense', 'inset', 'primary', 'secondary']);\nexport default listItemTextClasses;","'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"children\", \"className\", \"disableTypography\", \"inset\", \"primary\", \"primaryTypographyProps\", \"secondary\", \"secondaryTypographyProps\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base/composeClasses';\nimport Typography from '../Typography';\nimport ListContext from '../List/ListContext';\nimport useThemeProps from '../styles/useThemeProps';\nimport styled from '../styles/styled';\nimport listItemTextClasses, { getListItemTextUtilityClass } from './listItemTextClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    inset,\n    primary,\n    secondary,\n    dense\n  } = ownerState;\n  const slots = {\n    root: ['root', inset && 'inset', dense && 'dense', primary && secondary && 'multiline'],\n    primary: ['primary'],\n    secondary: ['secondary']\n  };\n  return composeClasses(slots, getListItemTextUtilityClass, classes);\n};\nconst ListItemTextRoot = styled('div', {\n  name: 'MuiListItemText',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [{\n      [`& .${listItemTextClasses.primary}`]: styles.primary\n    }, {\n      [`& .${listItemTextClasses.secondary}`]: styles.secondary\n    }, styles.root, ownerState.inset && styles.inset, ownerState.primary && ownerState.secondary && styles.multiline, ownerState.dense && styles.dense];\n  }\n})(({\n  ownerState\n}) => _extends({\n  flex: '1 1 auto',\n  minWidth: 0,\n  marginTop: 4,\n  marginBottom: 4\n}, ownerState.primary && ownerState.secondary && {\n  marginTop: 6,\n  marginBottom: 6\n}, ownerState.inset && {\n  paddingLeft: 56\n}));\nconst ListItemText = /*#__PURE__*/React.forwardRef(function ListItemText(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiListItemText'\n  });\n  const {\n      children,\n      className,\n      disableTypography = false,\n      inset = false,\n      primary: primaryProp,\n      primaryTypographyProps,\n      secondary: secondaryProp,\n      secondaryTypographyProps\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const {\n    dense\n  } = React.useContext(ListContext);\n  let primary = primaryProp != null ? primaryProp : children;\n  let secondary = secondaryProp;\n  const ownerState = _extends({}, props, {\n    disableTypography,\n    inset,\n    primary: !!primary,\n    secondary: !!secondary,\n    dense\n  });\n  const classes = useUtilityClasses(ownerState);\n  if (primary != null && primary.type !== Typography && !disableTypography) {\n    primary = /*#__PURE__*/_jsx(Typography, _extends({\n      variant: dense ? 'body2' : 'body1',\n      className: classes.primary,\n      component: primaryTypographyProps != null && primaryTypographyProps.variant ? undefined : 'span',\n      display: \"block\"\n    }, primaryTypographyProps, {\n      children: primary\n    }));\n  }\n  if (secondary != null && secondary.type !== Typography && !disableTypography) {\n    secondary = /*#__PURE__*/_jsx(Typography, _extends({\n      variant: \"body2\",\n      className: classes.secondary,\n      color: \"text.secondary\",\n      display: \"block\"\n    }, secondaryTypographyProps, {\n      children: secondary\n    }));\n  }\n  return /*#__PURE__*/_jsxs(ListItemTextRoot, _extends({\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref\n  }, other, {\n    children: [primary, secondary]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? ListItemText.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * Alias for the `primary` prop.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the children won't be wrapped by a Typography component.\n   * This can be useful to render an alternative Typography variant by wrapping\n   * the `children` (or `primary`) text, and optional `secondary` text\n   * with the Typography component.\n   * @default false\n   */\n  disableTypography: PropTypes.bool,\n  /**\n   * If `true`, the children are indented.\n   * This should be used if there is no left avatar or left icon.\n   * @default false\n   */\n  inset: PropTypes.bool,\n  /**\n   * The main content element.\n   */\n  primary: PropTypes.node,\n  /**\n   * These props will be forwarded to the primary typography component\n   * (as long as disableTypography is not `true`).\n   */\n  primaryTypographyProps: PropTypes.object,\n  /**\n   * The secondary content element.\n   */\n  secondary: PropTypes.node,\n  /**\n   * These props will be forwarded to the secondary typography component\n   * (as long as disableTypography is not `true`).\n   */\n  secondaryTypographyProps: PropTypes.object,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default ListItemText;","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getTypographyUtilityClass(slot) {\n  return generateUtilityClass('MuiTypography', slot);\n}\nconst typographyClasses = generateUtilityClasses('MuiTypography', ['root', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'inherit', 'button', 'caption', 'overline', 'alignLeft', 'alignRight', 'alignCenter', 'alignJustify', 'noWrap', 'gutterBottom', 'paragraph']);\nexport default typographyClasses;","'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"align\", \"className\", \"component\", \"gutterBottom\", \"noWrap\", \"paragraph\", \"variant\", \"variantMapping\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_extendSxProp as extendSxProp } from '@mui/system';\nimport { unstable_composeClasses as composeClasses } from '@mui/base/composeClasses';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport capitalize from '../utils/capitalize';\nimport { getTypographyUtilityClass } from './typographyClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    align,\n    gutterBottom,\n    noWrap,\n    paragraph,\n    variant,\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root', variant, ownerState.align !== 'inherit' && `align${capitalize(align)}`, gutterBottom && 'gutterBottom', noWrap && 'noWrap', paragraph && 'paragraph']\n  };\n  return composeClasses(slots, getTypographyUtilityClass, classes);\n};\nexport const TypographyRoot = styled('span', {\n  name: 'MuiTypography',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.variant && styles[ownerState.variant], ownerState.align !== 'inherit' && styles[`align${capitalize(ownerState.align)}`], ownerState.noWrap && styles.noWrap, ownerState.gutterBottom && styles.gutterBottom, ownerState.paragraph && styles.paragraph];\n  }\n})(({\n  theme,\n  ownerState\n}) => _extends({\n  margin: 0\n}, ownerState.variant === 'inherit' && {\n  // Some elements, like <button> on Chrome have default font that doesn't inherit, reset this.\n  font: 'inherit'\n}, ownerState.variant !== 'inherit' && theme.typography[ownerState.variant], ownerState.align !== 'inherit' && {\n  textAlign: ownerState.align\n}, ownerState.noWrap && {\n  overflow: 'hidden',\n  textOverflow: 'ellipsis',\n  whiteSpace: 'nowrap'\n}, ownerState.gutterBottom && {\n  marginBottom: '0.35em'\n}, ownerState.paragraph && {\n  marginBottom: 16\n}));\nconst defaultVariantMapping = {\n  h1: 'h1',\n  h2: 'h2',\n  h3: 'h3',\n  h4: 'h4',\n  h5: 'h5',\n  h6: 'h6',\n  subtitle1: 'h6',\n  subtitle2: 'h6',\n  body1: 'p',\n  body2: 'p',\n  inherit: 'p'\n};\n\n// TODO v6: deprecate these color values in v5.x and remove the transformation in v6\nconst colorTransformations = {\n  primary: 'primary.main',\n  textPrimary: 'text.primary',\n  secondary: 'secondary.main',\n  textSecondary: 'text.secondary',\n  error: 'error.main'\n};\nconst transformDeprecatedColors = color => {\n  return colorTransformations[color] || color;\n};\nconst Typography = /*#__PURE__*/React.forwardRef(function Typography(inProps, ref) {\n  const themeProps = useThemeProps({\n    props: inProps,\n    name: 'MuiTypography'\n  });\n  const color = transformDeprecatedColors(themeProps.color);\n  const props = extendSxProp(_extends({}, themeProps, {\n    color\n  }));\n  const {\n      align = 'inherit',\n      className,\n      component,\n      gutterBottom = false,\n      noWrap = false,\n      paragraph = false,\n      variant = 'body1',\n      variantMapping = defaultVariantMapping\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    align,\n    color,\n    className,\n    component,\n    gutterBottom,\n    noWrap,\n    paragraph,\n    variant,\n    variantMapping\n  });\n  const Component = component || (paragraph ? 'p' : variantMapping[variant] || defaultVariantMapping[variant]) || 'span';\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(TypographyRoot, _extends({\n    as: Component,\n    ref: ref,\n    ownerState: ownerState,\n    className: clsx(classes.root, className)\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Typography.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * Set the text-align on the component.\n   * @default 'inherit'\n   */\n  align: PropTypes.oneOf(['center', 'inherit', 'justify', 'left', 'right']),\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, the text will have a bottom margin.\n   * @default false\n   */\n  gutterBottom: PropTypes.bool,\n  /**\n   * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.\n   *\n   * Note that text overflow can only happen with block or inline-block level elements\n   * (the element needs to have a width in order to overflow).\n   * @default false\n   */\n  noWrap: PropTypes.bool,\n  /**\n   * If `true`, the element will be a paragraph element.\n   * @default false\n   */\n  paragraph: PropTypes.bool,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * Applies the theme typography styles.\n   * @default 'body1'\n   */\n  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['body1', 'body2', 'button', 'caption', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'inherit', 'overline', 'subtitle1', 'subtitle2']), PropTypes.string]),\n  /**\n   * The component maps the variant prop to a range of different HTML element types.\n   * For instance, subtitle1 to `<h6>`.\n   * If you wish to change that mapping, you can provide your own.\n   * Alternatively, you can use the `component` prop.\n   * @default {\n   *   h1: 'h1',\n   *   h2: 'h2',\n   *   h3: 'h3',\n   *   h4: 'h4',\n   *   h5: 'h5',\n   *   h6: 'h6',\n   *   subtitle1: 'h6',\n   *   subtitle2: 'h6',\n   *   body1: 'p',\n   *   body2: 'p',\n   *   inherit: 'p',\n   * }\n   */\n  variantMapping: PropTypes /* @typescript-to-proptypes-ignore */.object\n} : void 0;\nexport default Typography;","var safeIsNaN = Number.isNaN ||\n    function ponyfill(value) {\n        return typeof value === 'number' && value !== value;\n    };\nfunction isEqual(first, second) {\n    if (first === second) {\n        return true;\n    }\n    if (safeIsNaN(first) && safeIsNaN(second)) {\n        return true;\n    }\n    return false;\n}\nfunction areInputsEqual(newInputs, lastInputs) {\n    if (newInputs.length !== lastInputs.length) {\n        return false;\n    }\n    for (var i = 0; i < newInputs.length; i++) {\n        if (!isEqual(newInputs[i], lastInputs[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction memoizeOne(resultFn, isEqual) {\n    if (isEqual === void 0) { isEqual = areInputsEqual; }\n    var lastThis;\n    var lastArgs = [];\n    var lastResult;\n    var calledOnce = false;\n    function memoized() {\n        var newArgs = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            newArgs[_i] = arguments[_i];\n        }\n        if (calledOnce && lastThis === this && isEqual(newArgs, lastArgs)) {\n            return lastResult;\n        }\n        lastResult = resultFn.apply(this, newArgs);\n        calledOnce = true;\n        lastThis = this;\n        lastArgs = newArgs;\n        return lastResult;\n    }\n    return memoized;\n}\n\nexport default memoizeOne;\n","// @flow\n\n// Animation frame based implementation of setTimeout.\n// Inspired by Joe Lambert, https://gist.github.com/joelambert/1002116#file-requesttimeout-js\n\nconst hasNativePerformanceNow =\n  typeof performance === 'object' && typeof performance.now === 'function';\n\nconst now = hasNativePerformanceNow\n  ? () => performance.now()\n  : () => Date.now();\n\nexport type TimeoutID = {|\n  id: AnimationFrameID,\n|};\n\nexport function cancelTimeout(timeoutID: TimeoutID) {\n  cancelAnimationFrame(timeoutID.id);\n}\n\nexport function requestTimeout(callback: Function, delay: number): TimeoutID {\n  const start = now();\n\n  function tick() {\n    if (now() - start >= delay) {\n      callback.call(null);\n    } else {\n      timeoutID.id = requestAnimationFrame(tick);\n    }\n  }\n\n  const timeoutID: TimeoutID = {\n    id: requestAnimationFrame(tick),\n  };\n\n  return timeoutID;\n}\n","// @flow\n\nlet size: number = -1;\n\n// This utility copied from \"dom-helpers\" package.\nexport function getScrollbarSize(recalculate?: boolean = false): number {\n  if (size === -1 || recalculate) {\n    const div = document.createElement('div');\n    const style = div.style;\n    style.width = '50px';\n    style.height = '50px';\n    style.overflow = 'scroll';\n\n    ((document.body: any): HTMLBodyElement).appendChild(div);\n\n    size = div.offsetWidth - div.clientWidth;\n\n    ((document.body: any): HTMLBodyElement).removeChild(div);\n  }\n\n  return size;\n}\n\nexport type RTLOffsetType =\n  | 'negative'\n  | 'positive-descending'\n  | 'positive-ascending';\n\nlet cachedRTLResult: RTLOffsetType | null = null;\n\n// TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n// Chrome does not seem to adhere; its scrollLeft values are positive (measured relative to the left).\n// Safari's elastic bounce makes detecting this even more complicated wrt potential false positives.\n// The safest way to check this is to intentionally set a negative offset,\n// and then verify that the subsequent \"scroll\" event matches the negative offset.\n// If it does not match, then we can assume a non-standard RTL scroll implementation.\nexport function getRTLOffsetType(recalculate?: boolean = false): RTLOffsetType {\n  if (cachedRTLResult === null || recalculate) {\n    const outerDiv = document.createElement('div');\n    const outerStyle = outerDiv.style;\n    outerStyle.width = '50px';\n    outerStyle.height = '50px';\n    outerStyle.overflow = 'scroll';\n    outerStyle.direction = 'rtl';\n\n    const innerDiv = document.createElement('div');\n    const innerStyle = innerDiv.style;\n    innerStyle.width = '100px';\n    innerStyle.height = '100px';\n\n    outerDiv.appendChild(innerDiv);\n\n    ((document.body: any): HTMLBodyElement).appendChild(outerDiv);\n\n    if (outerDiv.scrollLeft > 0) {\n      cachedRTLResult = 'positive-descending';\n    } else {\n      outerDiv.scrollLeft = 1;\n      if (outerDiv.scrollLeft === 0) {\n        cachedRTLResult = 'negative';\n      } else {\n        cachedRTLResult = 'positive-ascending';\n      }\n    }\n\n    ((document.body: any): HTMLBodyElement).removeChild(outerDiv);\n\n    return cachedRTLResult;\n  }\n\n  return cachedRTLResult;\n}\n","// @flow\n\nimport memoizeOne from 'memoize-one';\nimport { createElement, PureComponent } from 'react';\nimport { cancelTimeout, requestTimeout } from './timer';\nimport { getScrollbarSize, getRTLOffsetType } from './domHelpers';\n\nimport type { TimeoutID } from './timer';\n\ntype Direction = 'ltr' | 'rtl';\nexport type ScrollToAlign = 'auto' | 'smart' | 'center' | 'start' | 'end';\n\ntype itemSize = number | ((index: number) => number);\n\ntype RenderComponentProps<T> = {|\n  columnIndex: number,\n  data: T,\n  isScrolling?: boolean,\n  rowIndex: number,\n  style: Object,\n|};\nexport type RenderComponent<T> = React$ComponentType<\n  $Shape<RenderComponentProps<T>>\n>;\n\ntype ScrollDirection = 'forward' | 'backward';\n\ntype OnItemsRenderedCallback = ({\n  overscanColumnStartIndex: number,\n  overscanColumnStopIndex: number,\n  overscanRowStartIndex: number,\n  overscanRowStopIndex: number,\n  visibleColumnStartIndex: number,\n  visibleColumnStopIndex: number,\n  visibleRowStartIndex: number,\n  visibleRowStopIndex: number,\n}) => void;\ntype OnScrollCallback = ({\n  horizontalScrollDirection: ScrollDirection,\n  scrollLeft: number,\n  scrollTop: number,\n  scrollUpdateWasRequested: boolean,\n  verticalScrollDirection: ScrollDirection,\n}) => void;\n\ntype ScrollEvent = SyntheticEvent<HTMLDivElement>;\ntype ItemStyleCache = { [key: string]: Object };\n\ntype OuterProps = {|\n  children: React$Node,\n  className: string | void,\n  onScroll: ScrollEvent => void,\n  style: {\n    [string]: mixed,\n  },\n|};\n\ntype InnerProps = {|\n  children: React$Node,\n  style: {\n    [string]: mixed,\n  },\n|};\n\nexport type Props<T> = {|\n  children: RenderComponent<T>,\n  className?: string,\n  columnCount: number,\n  columnWidth: itemSize,\n  direction: Direction,\n  height: number,\n  initialScrollLeft?: number,\n  initialScrollTop?: number,\n  innerRef?: any,\n  innerElementType?: string | React$AbstractComponent<InnerProps, any>,\n  innerTagName?: string, // deprecated\n  itemData: T,\n  itemKey?: (params: {|\n    columnIndex: number,\n    data: T,\n    rowIndex: number,\n  |}) => any,\n  onItemsRendered?: OnItemsRenderedCallback,\n  onScroll?: OnScrollCallback,\n  outerRef?: any,\n  outerElementType?: string | React$AbstractComponent<OuterProps, any>,\n  outerTagName?: string, // deprecated\n  overscanColumnCount?: number,\n  overscanColumnsCount?: number, // deprecated\n  overscanCount?: number, // deprecated\n  overscanRowCount?: number,\n  overscanRowsCount?: number, // deprecated\n  rowCount: number,\n  rowHeight: itemSize,\n  style?: Object,\n  useIsScrolling: boolean,\n  width: number,\n|};\n\ntype State = {|\n  instance: any,\n  isScrolling: boolean,\n  horizontalScrollDirection: ScrollDirection,\n  scrollLeft: number,\n  scrollTop: number,\n  scrollUpdateWasRequested: boolean,\n  verticalScrollDirection: ScrollDirection,\n|};\n\ntype getItemOffset = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype getItemSize = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype getEstimatedTotalSize = (props: Props<any>, instanceProps: any) => number;\ntype GetOffsetForItemAndAlignment = (\n  props: Props<any>,\n  index: number,\n  align: ScrollToAlign,\n  scrollOffset: number,\n  instanceProps: any,\n  scrollbarSize: number\n) => number;\ntype GetStartIndexForOffset = (\n  props: Props<any>,\n  offset: number,\n  instanceProps: any\n) => number;\ntype GetStopIndexForStartIndex = (\n  props: Props<any>,\n  startIndex: number,\n  scrollOffset: number,\n  instanceProps: any\n) => number;\ntype InitInstanceProps = (props: Props<any>, instance: any) => any;\ntype ValidateProps = (props: Props<any>) => void;\n\nconst IS_SCROLLING_DEBOUNCE_INTERVAL = 150;\n\nconst defaultItemKey = ({ columnIndex, data, rowIndex }) =>\n  `${rowIndex}:${columnIndex}`;\n\n// In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\nlet devWarningsOverscanCount = null;\nlet devWarningsOverscanRowsColumnsCount = null;\nlet devWarningsTagName = null;\nif (process.env.NODE_ENV !== 'production') {\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\n    devWarningsOverscanCount = new WeakSet();\n    devWarningsOverscanRowsColumnsCount = new WeakSet();\n    devWarningsTagName = new WeakSet();\n  }\n}\n\nexport default function createGridComponent({\n  getColumnOffset,\n  getColumnStartIndexForOffset,\n  getColumnStopIndexForStartIndex,\n  getColumnWidth,\n  getEstimatedTotalHeight,\n  getEstimatedTotalWidth,\n  getOffsetForColumnAndAlignment,\n  getOffsetForRowAndAlignment,\n  getRowHeight,\n  getRowOffset,\n  getRowStartIndexForOffset,\n  getRowStopIndexForStartIndex,\n  initInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange,\n  validateProps,\n}: {|\n  getColumnOffset: getItemOffset,\n  getColumnStartIndexForOffset: GetStartIndexForOffset,\n  getColumnStopIndexForStartIndex: GetStopIndexForStartIndex,\n  getColumnWidth: getItemSize,\n  getEstimatedTotalHeight: getEstimatedTotalSize,\n  getEstimatedTotalWidth: getEstimatedTotalSize,\n  getOffsetForColumnAndAlignment: GetOffsetForItemAndAlignment,\n  getOffsetForRowAndAlignment: GetOffsetForItemAndAlignment,\n  getRowOffset: getItemOffset,\n  getRowHeight: getItemSize,\n  getRowStartIndexForOffset: GetStartIndexForOffset,\n  getRowStopIndexForStartIndex: GetStopIndexForStartIndex,\n  initInstanceProps: InitInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange: boolean,\n  validateProps: ValidateProps,\n|}) {\n  return class Grid<T> extends PureComponent<Props<T>, State> {\n    _instanceProps: any = initInstanceProps(this.props, this);\n    _resetIsScrollingTimeoutId: TimeoutID | null = null;\n    _outerRef: ?HTMLDivElement;\n\n    static defaultProps = {\n      direction: 'ltr',\n      itemData: undefined,\n      useIsScrolling: false,\n    };\n\n    state: State = {\n      instance: this,\n      isScrolling: false,\n      horizontalScrollDirection: 'forward',\n      scrollLeft:\n        typeof this.props.initialScrollLeft === 'number'\n          ? this.props.initialScrollLeft\n          : 0,\n      scrollTop:\n        typeof this.props.initialScrollTop === 'number'\n          ? this.props.initialScrollTop\n          : 0,\n      scrollUpdateWasRequested: false,\n      verticalScrollDirection: 'forward',\n    };\n\n    // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n    constructor(props: Props<T>) {\n      super(props);\n    }\n\n    static getDerivedStateFromProps(\n      nextProps: Props<T>,\n      prevState: State\n    ): $Shape<State> | null {\n      validateSharedProps(nextProps, prevState);\n      validateProps(nextProps);\n      return null;\n    }\n\n    scrollTo({\n      scrollLeft,\n      scrollTop,\n    }: {\n      scrollLeft: number,\n      scrollTop: number,\n    }): void {\n      if (scrollLeft !== undefined) {\n        scrollLeft = Math.max(0, scrollLeft);\n      }\n      if (scrollTop !== undefined) {\n        scrollTop = Math.max(0, scrollTop);\n      }\n\n      this.setState(prevState => {\n        if (scrollLeft === undefined) {\n          scrollLeft = prevState.scrollLeft;\n        }\n        if (scrollTop === undefined) {\n          scrollTop = prevState.scrollTop;\n        }\n\n        if (\n          prevState.scrollLeft === scrollLeft &&\n          prevState.scrollTop === scrollTop\n        ) {\n          return null;\n        }\n\n        return {\n          horizontalScrollDirection:\n            prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          scrollUpdateWasRequested: true,\n          verticalScrollDirection:\n            prevState.scrollTop < scrollTop ? 'forward' : 'backward',\n        };\n      }, this._resetIsScrollingDebounced);\n    }\n\n    scrollToItem({\n      align = 'auto',\n      columnIndex,\n      rowIndex,\n    }: {\n      align: ScrollToAlign,\n      columnIndex?: number,\n      rowIndex?: number,\n    }): void {\n      const { columnCount, height, rowCount, width } = this.props;\n      const { scrollLeft, scrollTop } = this.state;\n      const scrollbarSize = getScrollbarSize();\n\n      if (columnIndex !== undefined) {\n        columnIndex = Math.max(0, Math.min(columnIndex, columnCount - 1));\n      }\n      if (rowIndex !== undefined) {\n        rowIndex = Math.max(0, Math.min(rowIndex, rowCount - 1));\n      }\n\n      const estimatedTotalHeight = getEstimatedTotalHeight(\n        this.props,\n        this._instanceProps\n      );\n      const estimatedTotalWidth = getEstimatedTotalWidth(\n        this.props,\n        this._instanceProps\n      );\n\n      // The scrollbar size should be considered when scrolling an item into view,\n      // to ensure it's fully visible.\n      // But we only need to account for its size when it's actually visible.\n      const horizontalScrollbarSize =\n        estimatedTotalWidth > width ? scrollbarSize : 0;\n      const verticalScrollbarSize =\n        estimatedTotalHeight > height ? scrollbarSize : 0;\n\n      this.scrollTo({\n        scrollLeft:\n          columnIndex !== undefined\n            ? getOffsetForColumnAndAlignment(\n                this.props,\n                columnIndex,\n                align,\n                scrollLeft,\n                this._instanceProps,\n                verticalScrollbarSize\n              )\n            : scrollLeft,\n        scrollTop:\n          rowIndex !== undefined\n            ? getOffsetForRowAndAlignment(\n                this.props,\n                rowIndex,\n                align,\n                scrollTop,\n                this._instanceProps,\n                horizontalScrollbarSize\n              )\n            : scrollTop,\n      });\n    }\n\n    componentDidMount() {\n      const { initialScrollLeft, initialScrollTop } = this.props;\n\n      if (this._outerRef != null) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        if (typeof initialScrollLeft === 'number') {\n          outerRef.scrollLeft = initialScrollLeft;\n        }\n        if (typeof initialScrollTop === 'number') {\n          outerRef.scrollTop = initialScrollTop;\n        }\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentDidUpdate() {\n      const { direction } = this.props;\n      const { scrollLeft, scrollTop, scrollUpdateWasRequested } = this.state;\n\n      if (scrollUpdateWasRequested && this._outerRef != null) {\n        // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n        // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n        // So we need to determine which browser behavior we're dealing with, and mimic it.\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        if (direction === 'rtl') {\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              outerRef.scrollLeft = -scrollLeft;\n              break;\n            case 'positive-ascending':\n              outerRef.scrollLeft = scrollLeft;\n              break;\n            default:\n              const { clientWidth, scrollWidth } = outerRef;\n              outerRef.scrollLeft = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        } else {\n          outerRef.scrollLeft = Math.max(0, scrollLeft);\n        }\n\n        outerRef.scrollTop = Math.max(0, scrollTop);\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    }\n\n    render() {\n      const {\n        children,\n        className,\n        columnCount,\n        direction,\n        height,\n        innerRef,\n        innerElementType,\n        innerTagName,\n        itemData,\n        itemKey = defaultItemKey,\n        outerElementType,\n        outerTagName,\n        rowCount,\n        style,\n        useIsScrolling,\n        width,\n      } = this.props;\n      const { isScrolling } = this.state;\n\n      const [\n        columnStartIndex,\n        columnStopIndex,\n      ] = this._getHorizontalRangeToRender();\n      const [rowStartIndex, rowStopIndex] = this._getVerticalRangeToRender();\n\n      const items = [];\n      if (columnCount > 0 && rowCount) {\n        for (\n          let rowIndex = rowStartIndex;\n          rowIndex <= rowStopIndex;\n          rowIndex++\n        ) {\n          for (\n            let columnIndex = columnStartIndex;\n            columnIndex <= columnStopIndex;\n            columnIndex++\n          ) {\n            items.push(\n              createElement(children, {\n                columnIndex,\n                data: itemData,\n                isScrolling: useIsScrolling ? isScrolling : undefined,\n                key: itemKey({ columnIndex, data: itemData, rowIndex }),\n                rowIndex,\n                style: this._getItemStyle(rowIndex, columnIndex),\n              })\n            );\n          }\n        }\n      }\n\n      // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n      const estimatedTotalHeight = getEstimatedTotalHeight(\n        this.props,\n        this._instanceProps\n      );\n      const estimatedTotalWidth = getEstimatedTotalWidth(\n        this.props,\n        this._instanceProps\n      );\n\n      return createElement(\n        outerElementType || outerTagName || 'div',\n        {\n          className,\n          onScroll: this._onScroll,\n          ref: this._outerRefSetter,\n          style: {\n            position: 'relative',\n            height,\n            width,\n            overflow: 'auto',\n            WebkitOverflowScrolling: 'touch',\n            willChange: 'transform',\n            direction,\n            ...style,\n          },\n        },\n        createElement(innerElementType || innerTagName || 'div', {\n          children: items,\n          ref: innerRef,\n          style: {\n            height: estimatedTotalHeight,\n            pointerEvents: isScrolling ? 'none' : undefined,\n            width: estimatedTotalWidth,\n          },\n        })\n      );\n    }\n\n    _callOnItemsRendered: (\n      overscanColumnStartIndex: number,\n      overscanColumnStopIndex: number,\n      overscanRowStartIndex: number,\n      overscanRowStopIndex: number,\n      visibleColumnStartIndex: number,\n      visibleColumnStopIndex: number,\n      visibleRowStartIndex: number,\n      visibleRowStopIndex: number\n    ) => void;\n    _callOnItemsRendered = memoizeOne(\n      (\n        overscanColumnStartIndex: number,\n        overscanColumnStopIndex: number,\n        overscanRowStartIndex: number,\n        overscanRowStopIndex: number,\n        visibleColumnStartIndex: number,\n        visibleColumnStopIndex: number,\n        visibleRowStartIndex: number,\n        visibleRowStopIndex: number\n      ) =>\n        ((this.props.onItemsRendered: any): OnItemsRenderedCallback)({\n          overscanColumnStartIndex,\n          overscanColumnStopIndex,\n          overscanRowStartIndex,\n          overscanRowStopIndex,\n          visibleColumnStartIndex,\n          visibleColumnStopIndex,\n          visibleRowStartIndex,\n          visibleRowStopIndex,\n        })\n    );\n\n    _callOnScroll: (\n      scrollLeft: number,\n      scrollTop: number,\n      horizontalScrollDirection: ScrollDirection,\n      verticalScrollDirection: ScrollDirection,\n      scrollUpdateWasRequested: boolean\n    ) => void;\n    _callOnScroll = memoizeOne(\n      (\n        scrollLeft: number,\n        scrollTop: number,\n        horizontalScrollDirection: ScrollDirection,\n        verticalScrollDirection: ScrollDirection,\n        scrollUpdateWasRequested: boolean\n      ) =>\n        ((this.props.onScroll: any): OnScrollCallback)({\n          horizontalScrollDirection,\n          scrollLeft,\n          scrollTop,\n          verticalScrollDirection,\n          scrollUpdateWasRequested,\n        })\n    );\n\n    _callPropsCallbacks() {\n      const { columnCount, onItemsRendered, onScroll, rowCount } = this.props;\n\n      if (typeof onItemsRendered === 'function') {\n        if (columnCount > 0 && rowCount > 0) {\n          const [\n            overscanColumnStartIndex,\n            overscanColumnStopIndex,\n            visibleColumnStartIndex,\n            visibleColumnStopIndex,\n          ] = this._getHorizontalRangeToRender();\n          const [\n            overscanRowStartIndex,\n            overscanRowStopIndex,\n            visibleRowStartIndex,\n            visibleRowStopIndex,\n          ] = this._getVerticalRangeToRender();\n          this._callOnItemsRendered(\n            overscanColumnStartIndex,\n            overscanColumnStopIndex,\n            overscanRowStartIndex,\n            overscanRowStopIndex,\n            visibleColumnStartIndex,\n            visibleColumnStopIndex,\n            visibleRowStartIndex,\n            visibleRowStopIndex\n          );\n        }\n      }\n\n      if (typeof onScroll === 'function') {\n        const {\n          horizontalScrollDirection,\n          scrollLeft,\n          scrollTop,\n          scrollUpdateWasRequested,\n          verticalScrollDirection,\n        } = this.state;\n        this._callOnScroll(\n          scrollLeft,\n          scrollTop,\n          horizontalScrollDirection,\n          verticalScrollDirection,\n          scrollUpdateWasRequested\n        );\n      }\n    }\n\n    // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n    _getItemStyle: (rowIndex: number, columnIndex: number) => Object;\n    _getItemStyle = (rowIndex: number, columnIndex: number): Object => {\n      const { columnWidth, direction, rowHeight } = this.props;\n\n      const itemStyleCache = this._getItemStyleCache(\n        shouldResetStyleCacheOnItemSizeChange && columnWidth,\n        shouldResetStyleCacheOnItemSizeChange && direction,\n        shouldResetStyleCacheOnItemSizeChange && rowHeight\n      );\n\n      const key = `${rowIndex}:${columnIndex}`;\n\n      let style;\n      if (itemStyleCache.hasOwnProperty(key)) {\n        style = itemStyleCache[key];\n      } else {\n        const offset = getColumnOffset(\n          this.props,\n          columnIndex,\n          this._instanceProps\n        );\n        const isRtl = direction === 'rtl';\n        itemStyleCache[key] = style = {\n          position: 'absolute',\n          left: isRtl ? undefined : offset,\n          right: isRtl ? offset : undefined,\n          top: getRowOffset(this.props, rowIndex, this._instanceProps),\n          height: getRowHeight(this.props, rowIndex, this._instanceProps),\n          width: getColumnWidth(this.props, columnIndex, this._instanceProps),\n        };\n      }\n\n      return style;\n    };\n\n    _getItemStyleCache: (_: any, __: any, ___: any) => ItemStyleCache;\n    _getItemStyleCache = memoizeOne((_: any, __: any, ___: any) => ({}));\n\n    _getHorizontalRangeToRender(): [number, number, number, number] {\n      const {\n        columnCount,\n        overscanColumnCount,\n        overscanColumnsCount,\n        overscanCount,\n        rowCount,\n      } = this.props;\n      const { horizontalScrollDirection, isScrolling, scrollLeft } = this.state;\n\n      const overscanCountResolved: number =\n        overscanColumnCount || overscanColumnsCount || overscanCount || 1;\n\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      const startIndex = getColumnStartIndexForOffset(\n        this.props,\n        scrollLeft,\n        this._instanceProps\n      );\n      const stopIndex = getColumnStopIndexForStartIndex(\n        this.props,\n        startIndex,\n        scrollLeft,\n        this._instanceProps\n      );\n\n      // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n      const overscanBackward =\n        !isScrolling || horizontalScrollDirection === 'backward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n      const overscanForward =\n        !isScrolling || horizontalScrollDirection === 'forward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n\n      return [\n        Math.max(0, startIndex - overscanBackward),\n        Math.max(0, Math.min(columnCount - 1, stopIndex + overscanForward)),\n        startIndex,\n        stopIndex,\n      ];\n    }\n\n    _getVerticalRangeToRender(): [number, number, number, number] {\n      const {\n        columnCount,\n        overscanCount,\n        overscanRowCount,\n        overscanRowsCount,\n        rowCount,\n      } = this.props;\n      const { isScrolling, verticalScrollDirection, scrollTop } = this.state;\n\n      const overscanCountResolved: number =\n        overscanRowCount || overscanRowsCount || overscanCount || 1;\n\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      const startIndex = getRowStartIndexForOffset(\n        this.props,\n        scrollTop,\n        this._instanceProps\n      );\n      const stopIndex = getRowStopIndexForStartIndex(\n        this.props,\n        startIndex,\n        scrollTop,\n        this._instanceProps\n      );\n\n      // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n      const overscanBackward =\n        !isScrolling || verticalScrollDirection === 'backward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n      const overscanForward =\n        !isScrolling || verticalScrollDirection === 'forward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n\n      return [\n        Math.max(0, startIndex - overscanBackward),\n        Math.max(0, Math.min(rowCount - 1, stopIndex + overscanForward)),\n        startIndex,\n        stopIndex,\n      ];\n    }\n\n    _onScroll = (event: ScrollEvent): void => {\n      const {\n        clientHeight,\n        clientWidth,\n        scrollLeft,\n        scrollTop,\n        scrollHeight,\n        scrollWidth,\n      } = event.currentTarget;\n      this.setState(prevState => {\n        if (\n          prevState.scrollLeft === scrollLeft &&\n          prevState.scrollTop === scrollTop\n        ) {\n          // Scroll position may have been updated by cDM/cDU,\n          // In which case we don't need to trigger another render,\n          // And we don't want to update state.isScrolling.\n          return null;\n        }\n\n        const { direction } = this.props;\n\n        // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n        // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n        // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n        // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n        let calculatedScrollLeft = scrollLeft;\n        if (direction === 'rtl') {\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              calculatedScrollLeft = -scrollLeft;\n              break;\n            case 'positive-descending':\n              calculatedScrollLeft = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        }\n\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n        calculatedScrollLeft = Math.max(\n          0,\n          Math.min(calculatedScrollLeft, scrollWidth - clientWidth)\n        );\n        const calculatedScrollTop = Math.max(\n          0,\n          Math.min(scrollTop, scrollHeight - clientHeight)\n        );\n\n        return {\n          isScrolling: true,\n          horizontalScrollDirection:\n            prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n          scrollLeft: calculatedScrollLeft,\n          scrollTop: calculatedScrollTop,\n          verticalScrollDirection:\n            prevState.scrollTop < scrollTop ? 'forward' : 'backward',\n          scrollUpdateWasRequested: false,\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _outerRefSetter = (ref: any): void => {\n      const { outerRef } = this.props;\n\n      this._outerRef = ((ref: any): HTMLDivElement);\n\n      if (typeof outerRef === 'function') {\n        outerRef(ref);\n      } else if (\n        outerRef != null &&\n        typeof outerRef === 'object' &&\n        outerRef.hasOwnProperty('current')\n      ) {\n        outerRef.current = ref;\n      }\n    };\n\n    _resetIsScrollingDebounced = () => {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n\n      this._resetIsScrollingTimeoutId = requestTimeout(\n        this._resetIsScrolling,\n        IS_SCROLLING_DEBOUNCE_INTERVAL\n      );\n    };\n\n    _resetIsScrolling = () => {\n      this._resetIsScrollingTimeoutId = null;\n\n      this.setState({ isScrolling: false }, () => {\n        // Clear style cache after state update has been committed.\n        // This way we don't break pure sCU for items that don't use isScrolling param.\n        this._getItemStyleCache(-1);\n      });\n    };\n  };\n}\n\nconst validateSharedProps = (\n  {\n    children,\n    direction,\n    height,\n    innerTagName,\n    outerTagName,\n    overscanColumnsCount,\n    overscanCount,\n    overscanRowsCount,\n    width,\n  }: Props<any>,\n  { instance }: State\n): void => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof overscanCount === 'number') {\n      if (devWarningsOverscanCount && !devWarningsOverscanCount.has(instance)) {\n        devWarningsOverscanCount.add(instance);\n        console.warn(\n          'The overscanCount prop has been deprecated. ' +\n            'Please use the overscanColumnCount and overscanRowCount props instead.'\n        );\n      }\n    }\n\n    if (\n      typeof overscanColumnsCount === 'number' ||\n      typeof overscanRowsCount === 'number'\n    ) {\n      if (\n        devWarningsOverscanRowsColumnsCount &&\n        !devWarningsOverscanRowsColumnsCount.has(instance)\n      ) {\n        devWarningsOverscanRowsColumnsCount.add(instance);\n        console.warn(\n          'The overscanColumnsCount and overscanRowsCount props have been deprecated. ' +\n            'Please use the overscanColumnCount and overscanRowCount props instead.'\n        );\n      }\n    }\n\n    if (innerTagName != null || outerTagName != null) {\n      if (devWarningsTagName && !devWarningsTagName.has(instance)) {\n        devWarningsTagName.add(instance);\n        console.warn(\n          'The innerTagName and outerTagName props have been deprecated. ' +\n            'Please use the innerElementType and outerElementType props instead.'\n        );\n      }\n    }\n\n    if (children == null) {\n      throw Error(\n        'An invalid \"children\" prop has been specified. ' +\n          'Value should be a React component. ' +\n          `\"${children === null ? 'null' : typeof children}\" was specified.`\n      );\n    }\n\n    switch (direction) {\n      case 'ltr':\n      case 'rtl':\n        // Valid values\n        break;\n      default:\n        throw Error(\n          'An invalid \"direction\" prop has been specified. ' +\n            'Value should be either \"ltr\" or \"rtl\". ' +\n            `\"${direction}\" was specified.`\n        );\n    }\n\n    if (typeof width !== 'number') {\n      throw Error(\n        'An invalid \"width\" prop has been specified. ' +\n          'Grids must specify a number for width. ' +\n          `\"${width === null ? 'null' : typeof width}\" was specified.`\n      );\n    }\n\n    if (typeof height !== 'number') {\n      throw Error(\n        'An invalid \"height\" prop has been specified. ' +\n          'Grids must specify a number for height. ' +\n          `\"${height === null ? 'null' : typeof height}\" was specified.`\n      );\n    }\n  }\n};\n","// @flow\n\nimport memoizeOne from 'memoize-one';\nimport { createElement, PureComponent } from 'react';\nimport { cancelTimeout, requestTimeout } from './timer';\nimport { getScrollbarSize, getRTLOffsetType } from './domHelpers';\n\nimport type { TimeoutID } from './timer';\n\nexport type ScrollToAlign = 'auto' | 'smart' | 'center' | 'start' | 'end';\n\ntype itemSize = number | ((index: number) => number);\n// TODO Deprecate directions \"horizontal\" and \"vertical\"\ntype Direction = 'ltr' | 'rtl' | 'horizontal' | 'vertical';\ntype Layout = 'horizontal' | 'vertical';\n\ntype RenderComponentProps<T> = {|\n  data: T,\n  index: number,\n  isScrolling?: boolean,\n  style: Object,\n|};\ntype RenderComponent<T> = React$ComponentType<$Shape<RenderComponentProps<T>>>;\n\ntype ScrollDirection = 'forward' | 'backward';\n\ntype onItemsRenderedCallback = ({\n  overscanStartIndex: number,\n  overscanStopIndex: number,\n  visibleStartIndex: number,\n  visibleStopIndex: number,\n}) => void;\ntype onScrollCallback = ({\n  scrollDirection: ScrollDirection,\n  scrollOffset: number,\n  scrollUpdateWasRequested: boolean,\n}) => void;\n\ntype ScrollEvent = SyntheticEvent<HTMLDivElement>;\ntype ItemStyleCache = { [index: number]: Object };\n\ntype OuterProps = {|\n  children: React$Node,\n  className: string | void,\n  onScroll: ScrollEvent => void,\n  style: {\n    [string]: mixed,\n  },\n|};\n\ntype InnerProps = {|\n  children: React$Node,\n  style: {\n    [string]: mixed,\n  },\n|};\n\nexport type Props<T> = {|\n  children: RenderComponent<T>,\n  className?: string,\n  direction: Direction,\n  height: number | string,\n  initialScrollOffset?: number,\n  innerRef?: any,\n  innerElementType?: string | React$AbstractComponent<InnerProps, any>,\n  innerTagName?: string, // deprecated\n  itemCount: number,\n  itemData: T,\n  itemKey?: (index: number, data: T) => any,\n  itemSize: itemSize,\n  layout: Layout,\n  onItemsRendered?: onItemsRenderedCallback,\n  onScroll?: onScrollCallback,\n  outerRef?: any,\n  outerElementType?: string | React$AbstractComponent<OuterProps, any>,\n  outerTagName?: string, // deprecated\n  overscanCount: number,\n  style?: Object,\n  useIsScrolling: boolean,\n  width: number | string,\n|};\n\ntype State = {|\n  instance: any,\n  isScrolling: boolean,\n  scrollDirection: ScrollDirection,\n  scrollOffset: number,\n  scrollUpdateWasRequested: boolean,\n|};\n\ntype GetItemOffset = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype GetItemSize = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype GetEstimatedTotalSize = (props: Props<any>, instanceProps: any) => number;\ntype GetOffsetForIndexAndAlignment = (\n  props: Props<any>,\n  index: number,\n  align: ScrollToAlign,\n  scrollOffset: number,\n  instanceProps: any\n) => number;\ntype GetStartIndexForOffset = (\n  props: Props<any>,\n  offset: number,\n  instanceProps: any\n) => number;\ntype GetStopIndexForStartIndex = (\n  props: Props<any>,\n  startIndex: number,\n  scrollOffset: number,\n  instanceProps: any\n) => number;\ntype InitInstanceProps = (props: Props<any>, instance: any) => any;\ntype ValidateProps = (props: Props<any>) => void;\n\nconst IS_SCROLLING_DEBOUNCE_INTERVAL = 150;\n\nconst defaultItemKey = (index: number, data: any) => index;\n\n// In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\nlet devWarningsDirection = null;\nlet devWarningsTagName = null;\nif (process.env.NODE_ENV !== 'production') {\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\n    devWarningsDirection = new WeakSet();\n    devWarningsTagName = new WeakSet();\n  }\n}\n\nexport default function createListComponent({\n  getItemOffset,\n  getEstimatedTotalSize,\n  getItemSize,\n  getOffsetForIndexAndAlignment,\n  getStartIndexForOffset,\n  getStopIndexForStartIndex,\n  initInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange,\n  validateProps,\n}: {|\n  getItemOffset: GetItemOffset,\n  getEstimatedTotalSize: GetEstimatedTotalSize,\n  getItemSize: GetItemSize,\n  getOffsetForIndexAndAlignment: GetOffsetForIndexAndAlignment,\n  getStartIndexForOffset: GetStartIndexForOffset,\n  getStopIndexForStartIndex: GetStopIndexForStartIndex,\n  initInstanceProps: InitInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange: boolean,\n  validateProps: ValidateProps,\n|}) {\n  return class List<T> extends PureComponent<Props<T>, State> {\n    _instanceProps: any = initInstanceProps(this.props, this);\n    _outerRef: ?HTMLDivElement;\n    _resetIsScrollingTimeoutId: TimeoutID | null = null;\n\n    static defaultProps = {\n      direction: 'ltr',\n      itemData: undefined,\n      layout: 'vertical',\n      overscanCount: 2,\n      useIsScrolling: false,\n    };\n\n    state: State = {\n      instance: this,\n      isScrolling: false,\n      scrollDirection: 'forward',\n      scrollOffset:\n        typeof this.props.initialScrollOffset === 'number'\n          ? this.props.initialScrollOffset\n          : 0,\n      scrollUpdateWasRequested: false,\n    };\n\n    // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n    constructor(props: Props<T>) {\n      super(props);\n    }\n\n    static getDerivedStateFromProps(\n      nextProps: Props<T>,\n      prevState: State\n    ): $Shape<State> | null {\n      validateSharedProps(nextProps, prevState);\n      validateProps(nextProps);\n      return null;\n    }\n\n    scrollTo(scrollOffset: number): void {\n      scrollOffset = Math.max(0, scrollOffset);\n\n      this.setState(prevState => {\n        if (prevState.scrollOffset === scrollOffset) {\n          return null;\n        }\n        return {\n          scrollDirection:\n            prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n          scrollOffset: scrollOffset,\n          scrollUpdateWasRequested: true,\n        };\n      }, this._resetIsScrollingDebounced);\n    }\n\n    scrollToItem(index: number, align: ScrollToAlign = 'auto'): void {\n      const { itemCount, layout } = this.props;\n      const { scrollOffset } = this.state;\n\n      index = Math.max(0, Math.min(index, itemCount - 1));\n\n      // The scrollbar size should be considered when scrolling an item into view, to ensure it's fully visible.\n      // But we only need to account for its size when it's actually visible.\n      // This is an edge case for lists; normally they only scroll in the dominant direction.\n      let scrollbarSize = 0;\n      if (this._outerRef) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        if (layout === 'vertical') {\n          scrollbarSize =\n            outerRef.scrollWidth > outerRef.clientWidth\n              ? getScrollbarSize()\n              : 0;\n        } else {\n          scrollbarSize =\n            outerRef.scrollHeight > outerRef.clientHeight\n              ? getScrollbarSize()\n              : 0;\n        }\n      }\n\n      this.scrollTo(\n        getOffsetForIndexAndAlignment(\n          this.props,\n          index,\n          align,\n          scrollOffset,\n          this._instanceProps,\n          scrollbarSize\n        )\n      );\n    }\n\n    componentDidMount() {\n      const { direction, initialScrollOffset, layout } = this.props;\n\n      if (typeof initialScrollOffset === 'number' && this._outerRef != null) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        // TODO Deprecate direction \"horizontal\"\n        if (direction === 'horizontal' || layout === 'horizontal') {\n          outerRef.scrollLeft = initialScrollOffset;\n        } else {\n          outerRef.scrollTop = initialScrollOffset;\n        }\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentDidUpdate() {\n      const { direction, layout } = this.props;\n      const { scrollOffset, scrollUpdateWasRequested } = this.state;\n\n      if (scrollUpdateWasRequested && this._outerRef != null) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n\n        // TODO Deprecate direction \"horizontal\"\n        if (direction === 'horizontal' || layout === 'horizontal') {\n          if (direction === 'rtl') {\n            // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n            // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n            // So we need to determine which browser behavior we're dealing with, and mimic it.\n            switch (getRTLOffsetType()) {\n              case 'negative':\n                outerRef.scrollLeft = -scrollOffset;\n                break;\n              case 'positive-ascending':\n                outerRef.scrollLeft = scrollOffset;\n                break;\n              default:\n                const { clientWidth, scrollWidth } = outerRef;\n                outerRef.scrollLeft = scrollWidth - clientWidth - scrollOffset;\n                break;\n            }\n          } else {\n            outerRef.scrollLeft = scrollOffset;\n          }\n        } else {\n          outerRef.scrollTop = scrollOffset;\n        }\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    }\n\n    render() {\n      const {\n        children,\n        className,\n        direction,\n        height,\n        innerRef,\n        innerElementType,\n        innerTagName,\n        itemCount,\n        itemData,\n        itemKey = defaultItemKey,\n        layout,\n        outerElementType,\n        outerTagName,\n        style,\n        useIsScrolling,\n        width,\n      } = this.props;\n      const { isScrolling } = this.state;\n\n      // TODO Deprecate direction \"horizontal\"\n      const isHorizontal =\n        direction === 'horizontal' || layout === 'horizontal';\n\n      const onScroll = isHorizontal\n        ? this._onScrollHorizontal\n        : this._onScrollVertical;\n\n      const [startIndex, stopIndex] = this._getRangeToRender();\n\n      const items = [];\n      if (itemCount > 0) {\n        for (let index = startIndex; index <= stopIndex; index++) {\n          items.push(\n            createElement(children, {\n              data: itemData,\n              key: itemKey(index, itemData),\n              index,\n              isScrolling: useIsScrolling ? isScrolling : undefined,\n              style: this._getItemStyle(index),\n            })\n          );\n        }\n      }\n\n      // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n      const estimatedTotalSize = getEstimatedTotalSize(\n        this.props,\n        this._instanceProps\n      );\n\n      return createElement(\n        outerElementType || outerTagName || 'div',\n        {\n          className,\n          onScroll,\n          ref: this._outerRefSetter,\n          style: {\n            position: 'relative',\n            height,\n            width,\n            overflow: 'auto',\n            WebkitOverflowScrolling: 'touch',\n            willChange: 'transform',\n            direction,\n            ...style,\n          },\n        },\n        createElement(innerElementType || innerTagName || 'div', {\n          children: items,\n          ref: innerRef,\n          style: {\n            height: isHorizontal ? '100%' : estimatedTotalSize,\n            pointerEvents: isScrolling ? 'none' : undefined,\n            width: isHorizontal ? estimatedTotalSize : '100%',\n          },\n        })\n      );\n    }\n\n    _callOnItemsRendered: (\n      overscanStartIndex: number,\n      overscanStopIndex: number,\n      visibleStartIndex: number,\n      visibleStopIndex: number\n    ) => void;\n    _callOnItemsRendered = memoizeOne(\n      (\n        overscanStartIndex: number,\n        overscanStopIndex: number,\n        visibleStartIndex: number,\n        visibleStopIndex: number\n      ) =>\n        ((this.props.onItemsRendered: any): onItemsRenderedCallback)({\n          overscanStartIndex,\n          overscanStopIndex,\n          visibleStartIndex,\n          visibleStopIndex,\n        })\n    );\n\n    _callOnScroll: (\n      scrollDirection: ScrollDirection,\n      scrollOffset: number,\n      scrollUpdateWasRequested: boolean\n    ) => void;\n    _callOnScroll = memoizeOne(\n      (\n        scrollDirection: ScrollDirection,\n        scrollOffset: number,\n        scrollUpdateWasRequested: boolean\n      ) =>\n        ((this.props.onScroll: any): onScrollCallback)({\n          scrollDirection,\n          scrollOffset,\n          scrollUpdateWasRequested,\n        })\n    );\n\n    _callPropsCallbacks() {\n      if (typeof this.props.onItemsRendered === 'function') {\n        const { itemCount } = this.props;\n        if (itemCount > 0) {\n          const [\n            overscanStartIndex,\n            overscanStopIndex,\n            visibleStartIndex,\n            visibleStopIndex,\n          ] = this._getRangeToRender();\n          this._callOnItemsRendered(\n            overscanStartIndex,\n            overscanStopIndex,\n            visibleStartIndex,\n            visibleStopIndex\n          );\n        }\n      }\n\n      if (typeof this.props.onScroll === 'function') {\n        const {\n          scrollDirection,\n          scrollOffset,\n          scrollUpdateWasRequested,\n        } = this.state;\n        this._callOnScroll(\n          scrollDirection,\n          scrollOffset,\n          scrollUpdateWasRequested\n        );\n      }\n    }\n\n    // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n    _getItemStyle: (index: number) => Object;\n    _getItemStyle = (index: number): Object => {\n      const { direction, itemSize, layout } = this.props;\n\n      const itemStyleCache = this._getItemStyleCache(\n        shouldResetStyleCacheOnItemSizeChange && itemSize,\n        shouldResetStyleCacheOnItemSizeChange && layout,\n        shouldResetStyleCacheOnItemSizeChange && direction\n      );\n\n      let style;\n      if (itemStyleCache.hasOwnProperty(index)) {\n        style = itemStyleCache[index];\n      } else {\n        const offset = getItemOffset(this.props, index, this._instanceProps);\n        const size = getItemSize(this.props, index, this._instanceProps);\n\n        // TODO Deprecate direction \"horizontal\"\n        const isHorizontal =\n          direction === 'horizontal' || layout === 'horizontal';\n\n        const isRtl = direction === 'rtl';\n        const offsetHorizontal = isHorizontal ? offset : 0;\n        itemStyleCache[index] = style = {\n          position: 'absolute',\n          left: isRtl ? undefined : offsetHorizontal,\n          right: isRtl ? offsetHorizontal : undefined,\n          top: !isHorizontal ? offset : 0,\n          height: !isHorizontal ? size : '100%',\n          width: isHorizontal ? size : '100%',\n        };\n      }\n\n      return style;\n    };\n\n    _getItemStyleCache: (_: any, __: any, ___: any) => ItemStyleCache;\n    _getItemStyleCache = memoizeOne((_: any, __: any, ___: any) => ({}));\n\n    _getRangeToRender(): [number, number, number, number] {\n      const { itemCount, overscanCount } = this.props;\n      const { isScrolling, scrollDirection, scrollOffset } = this.state;\n\n      if (itemCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      const startIndex = getStartIndexForOffset(\n        this.props,\n        scrollOffset,\n        this._instanceProps\n      );\n      const stopIndex = getStopIndexForStartIndex(\n        this.props,\n        startIndex,\n        scrollOffset,\n        this._instanceProps\n      );\n\n      // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n      const overscanBackward =\n        !isScrolling || scrollDirection === 'backward'\n          ? Math.max(1, overscanCount)\n          : 1;\n      const overscanForward =\n        !isScrolling || scrollDirection === 'forward'\n          ? Math.max(1, overscanCount)\n          : 1;\n\n      return [\n        Math.max(0, startIndex - overscanBackward),\n        Math.max(0, Math.min(itemCount - 1, stopIndex + overscanForward)),\n        startIndex,\n        stopIndex,\n      ];\n    }\n\n    _onScrollHorizontal = (event: ScrollEvent): void => {\n      const { clientWidth, scrollLeft, scrollWidth } = event.currentTarget;\n      this.setState(prevState => {\n        if (prevState.scrollOffset === scrollLeft) {\n          // Scroll position may have been updated by cDM/cDU,\n          // In which case we don't need to trigger another render,\n          // And we don't want to update state.isScrolling.\n          return null;\n        }\n\n        const { direction } = this.props;\n\n        let scrollOffset = scrollLeft;\n        if (direction === 'rtl') {\n          // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n          // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n          // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n          // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              scrollOffset = -scrollLeft;\n              break;\n            case 'positive-descending':\n              scrollOffset = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        }\n\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n        scrollOffset = Math.max(\n          0,\n          Math.min(scrollOffset, scrollWidth - clientWidth)\n        );\n\n        return {\n          isScrolling: true,\n          scrollDirection:\n            prevState.scrollOffset < scrollLeft ? 'forward' : 'backward',\n          scrollOffset,\n          scrollUpdateWasRequested: false,\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _onScrollVertical = (event: ScrollEvent): void => {\n      const { clientHeight, scrollHeight, scrollTop } = event.currentTarget;\n      this.setState(prevState => {\n        if (prevState.scrollOffset === scrollTop) {\n          // Scroll position may have been updated by cDM/cDU,\n          // In which case we don't need to trigger another render,\n          // And we don't want to update state.isScrolling.\n          return null;\n        }\n\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n        const scrollOffset = Math.max(\n          0,\n          Math.min(scrollTop, scrollHeight - clientHeight)\n        );\n\n        return {\n          isScrolling: true,\n          scrollDirection:\n            prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n          scrollOffset,\n          scrollUpdateWasRequested: false,\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _outerRefSetter = (ref: any): void => {\n      const { outerRef } = this.props;\n\n      this._outerRef = ((ref: any): HTMLDivElement);\n\n      if (typeof outerRef === 'function') {\n        outerRef(ref);\n      } else if (\n        outerRef != null &&\n        typeof outerRef === 'object' &&\n        outerRef.hasOwnProperty('current')\n      ) {\n        outerRef.current = ref;\n      }\n    };\n\n    _resetIsScrollingDebounced = () => {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n\n      this._resetIsScrollingTimeoutId = requestTimeout(\n        this._resetIsScrolling,\n        IS_SCROLLING_DEBOUNCE_INTERVAL\n      );\n    };\n\n    _resetIsScrolling = () => {\n      this._resetIsScrollingTimeoutId = null;\n\n      this.setState({ isScrolling: false }, () => {\n        // Clear style cache after state update has been committed.\n        // This way we don't break pure sCU for items that don't use isScrolling param.\n        this._getItemStyleCache(-1, null);\n      });\n    };\n  };\n}\n\n// NOTE: I considered further wrapping individual items with a pure ListItem component.\n// This would avoid ever calling the render function for the same index more than once,\n// But it would also add the overhead of a lot of components/fibers.\n// I assume people already do this (render function returning a class component),\n// So my doing it would just unnecessarily double the wrappers.\n\nconst validateSharedProps = (\n  {\n    children,\n    direction,\n    height,\n    layout,\n    innerTagName,\n    outerTagName,\n    width,\n  }: Props<any>,\n  { instance }: State\n): void => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (innerTagName != null || outerTagName != null) {\n      if (devWarningsTagName && !devWarningsTagName.has(instance)) {\n        devWarningsTagName.add(instance);\n        console.warn(\n          'The innerTagName and outerTagName props have been deprecated. ' +\n            'Please use the innerElementType and outerElementType props instead.'\n        );\n      }\n    }\n\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n\n    switch (direction) {\n      case 'horizontal':\n      case 'vertical':\n        if (devWarningsDirection && !devWarningsDirection.has(instance)) {\n          devWarningsDirection.add(instance);\n          console.warn(\n            'The direction prop should be either \"ltr\" (default) or \"rtl\". ' +\n              'Please use the layout prop to specify \"vertical\" (default) or \"horizontal\" orientation.'\n          );\n        }\n        break;\n      case 'ltr':\n      case 'rtl':\n        // Valid values\n        break;\n      default:\n        throw Error(\n          'An invalid \"direction\" prop has been specified. ' +\n            'Value should be either \"ltr\" or \"rtl\". ' +\n            `\"${direction}\" was specified.`\n        );\n    }\n\n    switch (layout) {\n      case 'horizontal':\n      case 'vertical':\n        // Valid values\n        break;\n      default:\n        throw Error(\n          'An invalid \"layout\" prop has been specified. ' +\n            'Value should be either \"horizontal\" or \"vertical\". ' +\n            `\"${layout}\" was specified.`\n        );\n    }\n\n    if (children == null) {\n      throw Error(\n        'An invalid \"children\" prop has been specified. ' +\n          'Value should be a React component. ' +\n          `\"${children === null ? 'null' : typeof children}\" was specified.`\n      );\n    }\n\n    if (isHorizontal && typeof width !== 'number') {\n      throw Error(\n        'An invalid \"width\" prop has been specified. ' +\n          'Horizontal lists must specify a number for width. ' +\n          `\"${width === null ? 'null' : typeof width}\" was specified.`\n      );\n    } else if (!isHorizontal && typeof height !== 'number') {\n      throw Error(\n        'An invalid \"height\" prop has been specified. ' +\n          'Vertical lists must specify a number for height. ' +\n          `\"${height === null ? 'null' : typeof height}\" was specified.`\n      );\n    }\n  }\n};\n","// @flow\n\nimport createListComponent from './createListComponent';\n\nimport type { Props, ScrollToAlign } from './createListComponent';\n\ntype InstanceProps = any;\n\nconst FixedSizeList = createListComponent({\n  getItemOffset: ({ itemSize }: Props<any>, index: number): number =>\n    index * ((itemSize: any): number),\n\n  getItemSize: ({ itemSize }: Props<any>, index: number): number =>\n    ((itemSize: any): number),\n\n  getEstimatedTotalSize: ({ itemCount, itemSize }: Props<any>) =>\n    ((itemSize: any): number) * itemCount,\n\n  getOffsetForIndexAndAlignment: (\n    { direction, height, itemCount, itemSize, layout, width }: Props<any>,\n    index: number,\n    align: ScrollToAlign,\n    scrollOffset: number,\n    instanceProps: InstanceProps,\n    scrollbarSize: number\n  ): number => {\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const size = (((isHorizontal ? width : height): any): number);\n    const lastItemOffset = Math.max(\n      0,\n      itemCount * ((itemSize: any): number) - size\n    );\n    const maxOffset = Math.min(\n      lastItemOffset,\n      index * ((itemSize: any): number)\n    );\n    const minOffset = Math.max(\n      0,\n      index * ((itemSize: any): number) -\n        size +\n        ((itemSize: any): number) +\n        scrollbarSize\n    );\n\n    if (align === 'smart') {\n      if (\n        scrollOffset >= minOffset - size &&\n        scrollOffset <= maxOffset + size\n      ) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center': {\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        const middleOffset = Math.round(\n          minOffset + (maxOffset - minOffset) / 2\n        );\n        if (middleOffset < Math.ceil(size / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastItemOffset + Math.floor(size / 2)) {\n          return lastItemOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n      }\n      case 'auto':\n      default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (scrollOffset < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n\n  getStartIndexForOffset: (\n    { itemCount, itemSize }: Props<any>,\n    offset: number\n  ): number =>\n    Math.max(\n      0,\n      Math.min(itemCount - 1, Math.floor(offset / ((itemSize: any): number)))\n    ),\n\n  getStopIndexForStartIndex: (\n    { direction, height, itemCount, itemSize, layout, width }: Props<any>,\n    startIndex: number,\n    scrollOffset: number\n  ): number => {\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const offset = startIndex * ((itemSize: any): number);\n    const size = (((isHorizontal ? width : height): any): number);\n    const numVisibleItems = Math.ceil(\n      (size + scrollOffset - offset) / ((itemSize: any): number)\n    );\n    return Math.max(\n      0,\n      Math.min(\n        itemCount - 1,\n        startIndex + numVisibleItems - 1 // -1 is because stop index is inclusive\n      )\n    );\n  },\n\n  initInstanceProps(props: Props<any>): any {\n    // Noop\n  },\n\n  shouldResetStyleCacheOnItemSizeChange: true,\n\n  validateProps: ({ itemSize }: Props<any>): void => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof itemSize !== 'number') {\n        throw Error(\n          'An invalid \"itemSize\" prop has been specified. ' +\n            'Value should be a number. ' +\n            `\"${itemSize === null ? 'null' : typeof itemSize}\" was specified.`\n        );\n      }\n    }\n  },\n});\n\nexport default FixedSizeList;\n"],"names":["_excluded","ListItemButtonRoot","styled","ButtonBase","shouldForwardProp","prop","rootShouldForwardProp","name","slot","overridesResolver","props","styles","ownerState","root","dense","alignItems","alignItemsFlexStart","divider","disableGutters","gutters","_ref","_extends2","theme","_extends","display","flexGrow","justifyContent","position","textDecoration","minWidth","boxSizing","textAlign","paddingTop","paddingBottom","transition","transitions","create","duration","shortest","backgroundColor","vars","palette","action","hover","_defineProperty","concat","listItemButtonClasses","selected","primary","mainChannel","selectedOpacity","alpha","main","focusVisible","focusOpacity","hoverOpacity","focus","disabled","opacity","disabledOpacity","borderBottom","backgroundClip","paddingLeft","paddingRight","ListItemButton","React","inProps","ref","useThemeProps","_props$alignItems","_props$autoFocus","autoFocus","_props$component","component","children","_props$dense","_props$disableGutters","_props$divider","focusVisibleClassName","_props$selected","className","other","_objectWithoutPropertiesLoose","context","ListContext","childContext","listItemRef","useEnhancedEffect","current","classes","slots","composedClasses","composeClasses","getListItemButtonUtilityClass","useUtilityClasses","handleRef","useForkRef","_jsx","Provider","value","href","to","clsx","getListItemTextUtilityClass","generateUtilityClass","generateUtilityClasses","ListItemTextRoot","listItemTextClasses","secondary","inset","multiline","_ref3","flex","marginTop","marginBottom","_props$disableTypogra","disableTypography","_props$inset","primaryProp","primaryTypographyProps","secondaryProp","secondaryTypographyProps","type","Typography","variant","undefined","color","_jsxs","getTypographyUtilityClass","TypographyRoot","align","capitalize","noWrap","gutterBottom","paragraph","margin","font","typography","overflow","textOverflow","whiteSpace","defaultVariantMapping","h1","h2","h3","h4","h5","h6","subtitle1","subtitle2","body1","body2","inherit","colorTransformations","textPrimary","textSecondary","error","themeProps","transformDeprecatedColors","extendSxProp","_props$align","_props$gutterBottom","_props$noWrap","_props$paragraph","_props$variant","_props$variantMapping","variantMapping","Component","as","safeIsNaN","Number","isNaN","areInputsEqual","newInputs","lastInputs","length","i","first","second","resultFn","isEqual","lastThis","lastResult","lastArgs","calledOnce","newArgs","_i","arguments","this","apply","now","performance","Date","cancelTimeout","timeoutID","cancelAnimationFrame","id","requestTimeout","callback","delay","start","requestAnimationFrame","tick","call","size","getScrollbarSize","recalculate","div","document","createElement","style","width","height","body","appendChild","offsetWidth","clientWidth","removeChild","cachedRTLResult","getRTLOffsetType","outerDiv","outerStyle","direction","innerDiv","innerStyle","scrollLeft","defaultItemKey$1","index","data","createListComponent","_class","getItemOffset","getEstimatedTotalSize","getItemSize","getOffsetForIndexAndAlignment","getStartIndexForOffset","getStopIndexForStartIndex","initInstanceProps","shouldResetStyleCacheOnItemSizeChange","validateProps","_PureComponent","List","_this","_instanceProps","_assertThisInitialized","_outerRef","_resetIsScrollingTimeoutId","state","instance","isScrolling","scrollDirection","scrollOffset","initialScrollOffset","scrollUpdateWasRequested","_callOnItemsRendered","memoizeOne","overscanStartIndex","overscanStopIndex","visibleStartIndex","visibleStopIndex","onItemsRendered","_callOnScroll","onScroll","_getItemStyle","_this$props","itemSize","layout","itemStyleCache","_getItemStyleCache","hasOwnProperty","_offset","isHorizontal","isRtl","offsetHorizontal","left","right","top","_","__","___","_onScrollHorizontal","event","_event$currentTarget","currentTarget","scrollWidth","setState","prevState","Math","max","min","_resetIsScrollingDebounced","_onScrollVertical","_event$currentTarget2","clientHeight","scrollHeight","scrollTop","_outerRefSetter","outerRef","_resetIsScrolling","_inheritsLoose","getDerivedStateFromProps","nextProps","validateSharedProps$1","_proto","prototype","scrollTo","scrollToItem","_this$props2","itemCount","scrollbarSize","componentDidMount","_this$props3","_callPropsCallbacks","componentDidUpdate","_this$props4","_this$state","componentWillUnmount","render","_this$props5","innerRef","innerElementType","innerTagName","itemData","_this$props5$itemKey","itemKey","outerElementType","outerTagName","useIsScrolling","_this$_getRangeToRend","_getRangeToRender","startIndex","stopIndex","items","_index","push","key","estimatedTotalSize","WebkitOverflowScrolling","willChange","pointerEvents","_this$_getRangeToRend2","_overscanStartIndex","_overscanStopIndex","_visibleStartIndex","_visibleStopIndex","_this$state2","_scrollDirection","_scrollOffset","_scrollUpdateWasRequested","_this$props6","overscanCount","_this$state3","overscanBackward","overscanForward","PureComponent","defaultProps","_ref2","FixedSizeList","_ref4","instanceProps","lastItemOffset","maxOffset","minOffset","middleOffset","round","ceil","floor","_ref5","offset","_ref6","numVisibleItems","_ref7"],"sourceRoot":""}